package model;

public class Maze implements Observer  {
	/*
	 * 0 FOR WALL
	 * 1 FOR PATH
	 * 2 FOR TREE
	 * 4 FOR BULLET GIFT
	 * 5 FOR HEALTH GIFT
	 * 6 FOT SMALL COIN GIFT
	 * 7 FOR BIG COIN GIFT
	 * 88 FOR PLAYER
	 * 777 FOR ALBERT
	 * 999 FOR MUCHO
	 * 10,15 BOMB
	 * CHECK POINT IS 25
	 * 100 is for the end
	 *  
	 * */
	
	
	int[][] multi = new int[][]{
	      { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	      { 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,0, 1, 1, 0, 1, 1, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		  { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,1, 0, 1, 0, 1, 0, 0, 1, 1, 1,1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
		  { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,0, 0, 1, 1, 1, 1, 0, 1, 0, 0,0, 0, 1, 0, 1, 1, 1, 1, 1, 0 },		  
		  { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,1, 0, 0, 0, 0, 1, 0, 1, 1, 0,1, 0, 1, 0, 0, 0, 0, 0, 1, 0 },
		  { 0, 17, 0, 1, 0, 1, 0, 1, 0, 99,0, 0, 1, 1, 1, 1, 0, 1, 0, 0,1, 1, 1, 0, 0, 1, 1, 1, 1, 0 },		  
		  { 0, 2, 0, 1, 0, 1, 0, 1, 1, 1,1, 0, 0, 0, 0, 0, 0, 1, 0, 0,1, 0, 0, 0, 0, 1, 0, 0, 1, 0 },
		  { 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,1, 1, 1, 1, 1, 1, 1, 1, 0, 1,1, 0, 0, 0, 0, 1, 0, 1, 1, 0 },		  
		  { 0, 99, 25, 1, 1, 1, 1, 1, 1, 0,0, 0, 0, 0, 1, 0, 0, 0, 0, 1,0, 0, 0, 0, 0, 1, 0, 0, 1, 0 },
		  { 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,0, 0, 0, 0, 1, 0, 0, 0, 0, 1,0, 1, 1, 1, 0, 1, 0, 0, 1, 0 },		  
		  { 0, 1, 4, 1, 1, 10, 0, 0, 1, 0,0, 0, 0, 0, 1, 0, 0, 0, 0, 1,0, 1, 0, 0, 0, 1, 0, 1, 1, 0 },
		  { 0, 1, 0, 0, 0, 1, 1, 0, 1, 0,0, 0, 0, 0, 1, 1, 0, 0, 0, 1,1, 1, 0, 1, 1, 1, 0, 0, 1, 0 },		  
		  { 0, 1, 1, 1, 0, 0, 6, 0, 1, 0,0, 0, 0, 0, 0, 1, 0, 0, 0, 0,0, 0, 0, 1, 0, 0, 1, 0, 1, 0 },
		  { 0, 0, 0, 6, 0, 0, 7, 1, 1, 0,0, 0, 0, 0, 0, 1, 1, 1, 1, 1,1, 1, 1, 1, 0, 0, 0, 1, 1, 0 },		  
		  { 0, 1, 0, 7, 0, 0, 1, 0, 0, 0,0, 0, 0, 0, 0, 1, 0, 1, 0, 1,0, 1, 0, 1, 0, 0, 0, 0, 1, 0 },
		  { 0, 7, 6, 7, 1, 1, 1, 7, 6, 1,5, 1, 0, 0, 0, 0, 0, 1, 0, 0,0, 0, 0, 0, 0, 0, 1, 1, 1, 0 },		  
		  { 0, 6, 0, 1, 0, 1, 0, 1, 0, 0,0, 1, 0, 0, 0, 0, 1, 1, 0, 0,0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
		  { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1, 1, 0, 0, 0, 0, 1, 1, 1, 0 },		  
		  { 0, 1, 0, 1, 0, 7, 0, 1, 0, 0,0, 1, 0, 0, 0, 0, 0, 0, 0, 0,0, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
		  { 0, 1, 0, 1, 0, 6, 0, 1, 0, 1,1, 1, 0, 0, 0, 0, 0, 0, 0, 0,0, 1, 0, 0, 0, 0, 0, 0, 1, 0 },		  
		  { 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,0, 1, 0, 0, 0, 0, 0, 0, 0, 0,0, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
		  { 0, 1, 0, 1, 0, 1, 0, 1, 1, 1,1, 1, 1, 1, 1, 1, 0, 0, 1, 1,1, 1, 0, 0, 0, 0, 0, 0, 1, 0 },		  
		  { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,0, 1, 0, 0, 0, 1, 0, 0, 0, 0,0, 2, 0, 1, 0, 1, 0, 0, 1, 0 },
		  { 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,1, 1, 0, 1, 0, 1, 0, 0, 0, 0,0, 4, 1, 1, 1, 1, 1, 1, 1, 0 },		  
		  { 0, 25, 1, 1, 1, 1, 0, 0, 0, 0,0, 1, 0, 1, 0, 1, 0, 0, 0, 0,0, 1, 0, 0, 1, 0, 0, 1, 0, 0 },
		  { 0, 1, 0, 0, 0, 1, 0, 1, 1, 1,0, 1, 0, 1, 0, 1, 0, 0, 0, 0,0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },		  
		  { 0, 1, 0, 1, 1, 1, 0, 1, 0, 1,1, 1, 0, 1, 0, 1, 0, 0, 0, 0,0, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
		  { 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,0, 1, 0, 0, 0, 1, 0, 0, 0, 0,0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },		  
		  { 0, 1, 0, 1, 1, 1, 1, 1, 0, 1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1, 1, 1, 1, 1, 1, 1, 1, 0, 0 },
		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 100, 0, 0 },};
		  
		  private static Maze instance=null;
		  private Maze()
		  {
			  
		  }
		  public static Maze getInstance()
		  {
			  if(instance==null)
			  {
				  
				  instance= new Maze();
				  
			  }
			  return instance;
		  }
	
	public int [][] getMaze ()
	{



			
		
		
		return multi;}
	
	public void setElement(int row,int col,int value)
	{
		multi[row][col]=value;
		
	}

	@Override
	public void update(Type type) {
		// TODO Auto-generated method stub
		
	}
	

}
